{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Win 10\\\\Documents\\\\GitHub\\\\BlogApp\\\\client\\\\src\\\\components\\\\Article.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from \"react\";\nimport styles from \"../styles/Article.module.css\";\nimport { format } from \"date-fns\";\nimport { Post } from \"../pages/index\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nfunction Article({\n  selectedCategory,\n  articleFilter\n}) {\n  _s();\n  const [posts, setPosts] = useState([]);\n  const [page, setPage] = useState(1);\n  const [limit, setLimit] = useState(5);\n  useEffect(() => {\n    if (articleFilter) {\n      fetchFilteredPosts();\n    } else if (selectedCategory) {\n      fetchCategoryPosts();\n    } else {\n      fetchPopularPosts();\n    }\n  }, [selectedCategory, articleFilter, page]);\n  async function fetchPopularPosts() {\n    try {\n      const response = await fetch(`http://localhost:3001/posts/popularposts?page=${page}&limit=${limit}`);\n      if (!response.ok) {\n        throw new Error(\"Failed to fetch popular posts\");\n      }\n      const popularPosts = await response.json();\n      if (popularPosts.length === 0) {\n        alert(\"No popular posts found.\");\n      } else {\n        setPosts(popularPosts);\n      }\n    } catch (error) {\n      console.error(\"Error fetching popular posts: \", error);\n    }\n  }\n  async function fetchCategoryPosts() {\n    try {\n      const response = await fetch(`http://localhost:3001/posts/category?category=${selectedCategory}`);\n      if (!response.ok) {\n        throw new Error(\"Error fetching posts based on category\");\n      }\n      const categoryPosts = await response.json();\n      setPosts(categoryPosts);\n    } catch (error) {\n      console.error(\"Error fetching category posts:\", error);\n    }\n  }\n  async function fetchFilteredPosts() {\n    try {\n      const url = new URL(`http://localhost:3001/posts/filteredPosts?page=${page}&limit=${limit}`);\n      const params = new URLSearchParams();\n      if (articleFilter.dateFilter) {\n        params.set(\"dateFilter\", articleFilter.dateFilter);\n      }\n      if (articleFilter.typeFilter) {\n        params.set(\"typeFilter\", articleFilter.typeFilter);\n      }\n      if (articleFilter.tagFilter) {\n        params.set(\"tagFilter\", articleFilter.tagFilter);\n      }\n      url.search = params.toString();\n      const response = await fetch(url.toString());\n      if (!response.ok) {\n        throw new Error(\"Failed to fetch filtered posts\");\n      }\n      const fetchedPosts = await response.json();\n      setPosts(fetchedPosts);\n    } catch (error) {\n      console.error(\"Error fetching posts: \", error);\n    }\n  }\n  function handlePageChange(newPage) {\n    setPage(newPage);\n  }\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: styles.container,\n      children: [Array.isArray(posts) && posts.length === 0 ? /*#__PURE__*/_jsxDEV(\"h1\", {\n        style: {\n          textAlign: \"center\"\n        },\n        children: \"No posts available\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 95,\n        columnNumber: 11\n      }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n        className: styles.postsContainer,\n        children: Array.isArray(posts) && posts.map(post => /*#__PURE__*/_jsxDEV(Post, {\n          ...post\n        }, post._id, false, {\n          fileName: _jsxFileName,\n          lineNumber: 99,\n          columnNumber: 35\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 97,\n        columnNumber: 11\n      }, this), !Array.isArray(posts) && console.error(\"Invalid 'posts' data type:\", typeof posts)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 93,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: styles.pagination,\n      children: [/*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => handlePageChange(page - 1),\n        disabled: page === 1,\n        className: styles.paginationButton,\n        children: \"Previous\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 106,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n        style: {\n          color: \"white\",\n          padding: \"20px\"\n        },\n        children: [\"Page \", page]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 113,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => handlePageChange(page + 1),\n        disabled: posts.length < limit,\n        className: styles.paginationButton,\n        children: \"Next\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 114,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 105,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true);\n}\n_s(Article, \"5tjsExQ3U5tP0BAVQFkq4pTJt0U=\");\n_c = Article;\nexport default Article;\nvar _c;\n$RefreshReg$(_c, \"Article\");","map":{"version":3,"names":["React","useEffect","useState","styles","format","Post","jsxDEV","_jsxDEV","Fragment","_Fragment","Article","selectedCategory","articleFilter","_s","posts","setPosts","page","setPage","limit","setLimit","fetchFilteredPosts","fetchCategoryPosts","fetchPopularPosts","response","fetch","ok","Error","popularPosts","json","length","alert","error","console","categoryPosts","url","URL","params","URLSearchParams","dateFilter","set","typeFilter","tagFilter","search","toString","fetchedPosts","handlePageChange","newPage","children","className","container","Array","isArray","style","textAlign","fileName","_jsxFileName","lineNumber","columnNumber","postsContainer","map","post","_id","pagination","onClick","disabled","paginationButton","color","padding","_c","$RefreshReg$"],"sources":["C:/Users/Win 10/Documents/GitHub/BlogApp/client/src/components/Article.js"],"sourcesContent":["import React, { useEffect, useState } from \"react\";\r\nimport styles from \"../styles/Article.module.css\";\r\nimport { format } from \"date-fns\";\r\nimport { Post } from \"../pages/index\";\r\n\r\nfunction Article({ selectedCategory, articleFilter }) {\r\n  const [posts, setPosts] = useState([]);\r\n  const [page, setPage] = useState(1);\r\n  const [limit, setLimit] = useState(5);\r\n\r\n  useEffect(() => {\r\n    if (articleFilter) {\r\n      fetchFilteredPosts();\r\n    } else if (selectedCategory) {\r\n      fetchCategoryPosts();\r\n    } else {\r\n      fetchPopularPosts();\r\n    }\r\n  }, [selectedCategory, articleFilter, page]);\r\n\r\n  async function fetchPopularPosts() {\r\n    try {\r\n      const response = await fetch(\r\n        `http://localhost:3001/posts/popularposts?page=${page}&limit=${limit}`\r\n      );\r\n      if (!response.ok) {\r\n        throw new Error(\"Failed to fetch popular posts\");\r\n      }\r\n      const popularPosts = await response.json();\r\n      if (popularPosts.length === 0) {\r\n        alert(\"No popular posts found.\");\r\n      } else {\r\n        setPosts(popularPosts);\r\n      }\r\n    } catch (error) {\r\n      console.error(\"Error fetching popular posts: \", error);\r\n    }\r\n  }\r\n\r\n  async function fetchCategoryPosts() {\r\n    try {\r\n      const response = await fetch(\r\n        `http://localhost:3001/posts/category?category=${selectedCategory}`\r\n      );\r\n      if (!response.ok) {\r\n        throw new Error(\"Error fetching posts based on category\");\r\n      }\r\n      const categoryPosts = await response.json();\r\n      setPosts(categoryPosts);\r\n    } catch (error) {\r\n      console.error(\"Error fetching category posts:\", error);\r\n    }\r\n  }\r\n\r\n  async function fetchFilteredPosts() {\r\n    try {\r\n      const url = new URL(\r\n        `http://localhost:3001/posts/filteredPosts?page=${page}&limit=${limit}`\r\n      );\r\n      const params = new URLSearchParams();\r\n\r\n      if (articleFilter.dateFilter) {\r\n        params.set(\"dateFilter\", articleFilter.dateFilter);\r\n      }\r\n\r\n      if (articleFilter.typeFilter) {\r\n        params.set(\"typeFilter\", articleFilter.typeFilter);\r\n      }\r\n\r\n      if (articleFilter.tagFilter) {\r\n        params.set(\"tagFilter\", articleFilter.tagFilter);\r\n      }\r\n\r\n      url.search = params.toString();\r\n      const response = await fetch(url.toString());\r\n\r\n      if (!response.ok) {\r\n        throw new Error(\"Failed to fetch filtered posts\");\r\n      }\r\n      const fetchedPosts = await response.json();\r\n      setPosts(fetchedPosts);\r\n    } catch (error) {\r\n      console.error(\"Error fetching posts: \", error);\r\n    }\r\n  }\r\n\r\n  function handlePageChange(newPage) {\r\n    setPage(newPage);\r\n  }\r\n\r\n  return (\r\n    <>\r\n      <div className={styles.container}>\r\n        {Array.isArray(posts) && posts.length === 0 ? (\r\n          <h1 style={{ textAlign: \"center\" }}>No posts available</h1>\r\n        ) : (\r\n          <div className={styles.postsContainer}>\r\n            {Array.isArray(posts) &&\r\n              posts.map((post) => <Post key={post._id} {...post} />)}\r\n          </div>\r\n        )}\r\n        {!Array.isArray(posts) &&\r\n          console.error(\"Invalid 'posts' data type:\", typeof posts)}\r\n      </div>\r\n      <div className={styles.pagination}>\r\n        <button\r\n          onClick={() => handlePageChange(page - 1)}\r\n          disabled={page === 1}\r\n          className={styles.paginationButton}\r\n        >\r\n          Previous\r\n        </button>\r\n        <span style={{ color: \"white\", padding: \"20px\" }}>Page {page}</span>\r\n        <button\r\n          onClick={() => handlePageChange(page + 1)}\r\n          disabled={posts.length < limit}\r\n          className={styles.paginationButton}\r\n        >\r\n          Next\r\n        </button>\r\n      </div>\r\n    </>\r\n  );\r\n}\r\n\r\nexport default Article;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}